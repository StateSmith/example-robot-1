// Autogenerated with StateSmith 0.13.2+aa5928542b575391637cb5e1a7821184f6c3932c.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

    
#ifndef BOTSM_H
#define BOTSM_H
#include <stdint.h>
    

typedef enum BotSm_EventId
{
    BotSm_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    BotSm_EventId_ANY_KEY = 1
} BotSm_EventId;

enum
{
    BotSm_EventIdCount = 2
};

typedef enum BotSm_StateId
{
    BotSm_StateId_ROOT = 0,
    BotSm_StateId_E_STOP = 1,
    BotSm_StateId_REGULAR = 2,
    BotSm_StateId_CLEAN_KITCHEN = 3,
    BotSm_StateId_DROP_FOOD = 4,
    BotSm_StateId_FEED = 5,
    BotSm_StateId_MOVE_LEFT = 6,
    BotSm_StateId_PICKUP = 7,
    BotSm_StateId_PUSH_FOOD = 8,
    BotSm_StateId_REMIND_RESTART = 9
} BotSm_StateId;

enum
{
    BotSm_StateIdCount = 10
};


// Generated state machine
// forward declaration
typedef struct BotSm BotSm;

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void BotSm_ctor(BotSm* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void BotSm_start(BotSm* sm);

// Dispatches an event to the state machine. Not thread safe.
// Note! This function assumes that the `event_id` parameter is valid.
void BotSm_dispatch_event(BotSm* sm, BotSm_EventId event_id);

// Thread safe.
char const * BotSm_state_id_to_string(BotSm_StateId id);

// Thread safe.
char const * BotSm_event_id_to_string(BotSm_EventId id);

// Generated state machine
struct BotSm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    BotSm_StateId state_id;
};

#endif // BOTSM_H
